{
  "Commit 1":
  [
    "Apagar arquivos desnecessários - deixa só o index.js, e no index.js, troca de App para Cadastro, ou a página que vc for começar a codar",
    "Importar bootstrap (index.html) - https://www.bootstrapcdn.com/",
    "Css basicão: height, overflow-x, font-family, letter-spacing (global.css)",
    "Importar fontes usadas (global.css) - https://fonts.google.com/specimen/Open+Sans",
    "Criei a variavel --primary + .bg-primary",
    "Implementei container-fluid - https://getbootstrap.com/docs/5.0/layout/containers/",
    "Implementei h-100 no index.html + componente cadastro - https://getbootstrap.com/docs/4.0/utilities/sizing/",
    "Implementei col-12 e col-6 - https://getbootstrap.com/docs/4.0/layout/grid/",
    "Implementei form-control - https://getbootstrap.com/docs/4.3/components/forms/",
    "Implementei img-fluid - https://getbootstrap.com/docs/4.0/content/images/",
    "Implementei o input com código padrão do silvio",
    "Implementei o botão do bootstrap e sobreescrevi o estilo dele, pra isso, basta chamar a classe, e estilizar, normal, que ele já sobreescreve."
  ],
  "Commit 2":
  [
    "Criei o componente Produto, este é o produto lista, que vai aparecer no resumo na hora de fechar a venda. Ainda vamos criar o produto que vai aparecer na loja do cliente.",
    "Fiz a estilização do componente produto",
    "No projeto original previa usar o rounded circle do boostrap, mas não funcinou, então fiz na mão este elemento",
    "Criei a página de Checkout, fiz o grid todinho em bootstrap, configurei os inputs",
    "Na estilização da página checkout eu coloquei uma barra de rolagem exclusiva para a lista de produtos que o cliente comprou, dá pra editar essa barra de rolagem depois, fica bem bonito. Eu limitei em 500px a altura do resumo das compras do cliente, não gosto quando o design fica com rolagem na janela principal.",
    "Criei a variável de cor --secondary pra usar em outros lugares do projeto e ganhar tempo",
    "Aviso, o responsivo de todas as páginas eu deixei para o commit final"
  ],
  "Commit 3":
  [
    "Criei o componente ProdutoCard, que são os produtos que vão aparecer para o cliente comprar na loja do marketplace",
    "Fiz a estilização completa do ProdutoCard",
    "Criei a pagina de Petshop, que é como se fosse o site do parceiro que se cadastra na nossa plataforma",
    "Fiz a estilização da pagina Petshop"
  ],
  "Commit 4":
  [
    "Criei o componente sidebar, e implementei ele na minha ui usando o Dock",
    "Criei uma função openDrawer, dentro dela criei um custom event e enviei ele para o navegador",
    "Com o evento customizado criado, eu coloquei o openCart pra ser ativado quando o usuário clicar no botão da sidebar, que o botão de carrinho",
    "No meu componente sidebar criei um useEffect pra ser executado assim que o componente for montado na tela. Ele vai escutar o evento, e se ele escutar o openCart que é novo evento custom, ele vai executar uma função. Essa função basicamente troca o estado da sidebar para ativo, ou seja, clicou no carrinho, vai abrir o modal/drawer",
    "Instalei o dock que é a lib que usamos para gerenciar nosso drawer/sidebar, e fiz as configurações básicas, position right pra ele abrir a partir da direita, gerenciei se ele está visível ou não usando o event handler isVisible, e usei o event handler onVisibleChange, pra caso aconteça uma mudança de visibilidade do componente, ele atualize o estado também.",
    "Configurei para dentro da minha sidebar carregar os produtos que o usuário colocou na cestinha, até então são mocks, pois ainda não tem conexão com backend",
    "Criei um botão que aparece dentro desta sidebar, que é pro usuário finalizar a compra dele",
    "Estilizei a sidebar pra ela aparecer inteirinha em 1 view port, ou seja, pro usuário não ter que scrollar a tela pra ver todos os produtos",
    "Na estilização, adicionei uma formula pra calcular a altura da tela do usuário, e mostrar certinho 100% de altura, e habilita um scroll especial só para a div de cestinha de produtos, assim ele só scrola os itens que tem dentro, se forem muitos. TB configurei para eles aparecer alinhados ao topo (start), pra caso tenham poucos itens eles fiquem alinhados ao inicio.",
    "Fiz a estilização do botão de abrir a sidebar",
    "alinhei o botão laranja que fica dentro do component Product, o botão que fica ao lado de cada produto, ele estava alinhado start, e eu alinhei ele ao centro na vertical usando margin auto 0",
    "Implementei a sidebar no index.js principal da aplicação, para que o botão de carrinho possa abrir o modal/drawer em várias telas diferentes.",
    "Configuramos os momentos onde queremos que o botão de carrinho seja mostrado. Na tela de checkout e na tela de cadastro não faz sentido aparecer o botão de ver o carrinho, então através de props/atributos a gente passou hideCart, e quando este hideCart estiver presente, o botão de abrir carrinho não vai aparecer. A gente passa esta props para o header, e ela desativa o button dentro do arquivo dela mesmo. "
  ],
  "Commit 5":
  [
    "Implementei a lib Google Map React, essa lib a gente instala com yarn add google-map-react, e eu coloquei esse map como background para a home, para depois eu colocar markers mostrando no mapa as lojas parceiras",
    "Criei um componente marker e coloquei ele dentro da minha tag do Google Map React, desta forma, a gente passa latitude e longitude no marker, e ele vai ficar posicionado certinho no mapa.",
    "Estilizei o componente marker pra ele ser uma imagem svg de pin, coloquei img fluid nele, e coloquei um atributo de img src nele, pra que o marker mostre o logo do parceiro no mapa.",
    "Estilizei o componente marker pra ele ter um estado de ativo, que é quando o usuário clicar nele, pra ele ficar na cor primary, que é aquele verde",
    "Posicionei o img do marker de forma absolute , deixei ele redondinho para ele encaixar dentro do svg de marker em branco que a gente importou nele, fazemos isso justamente para que o logo do parceiro sobreponha o svg em branco que vem dentro dele, se não ele se comportaria inline ou block, e não é o que a gente quer",
    "Estilizei o container de map para ele ficar com 100% do tamanho, subtraindo os 94px do header, dessa forma fica tudo em uma viewport só, e não cria overflow",
    "Criei também a listagem de parceiros da pagina home, que vai mostrar as informações do parceiro, a distancia, a avaliação, se ele oferece frete grátis.",
    "Estilizei a home onde mostra os parceiros, para listar os parceiros e criar um overflow-x , que é a barra de rolagem na horizontal. Essa barra de rolagem vai ser ativada apenas para a div dos parceiros, e não no window/janela do navegador, isso cria um efeito muito legal, e depois a gente ainda consegue estilizar essa barra de rolagem. ",
    "Estilizei o container de listagem de parceiros para ele ficar por cima do Google map react que a gente configurou de background.",
    "Configurei as rotas do projeto, usando a lib react-router-dom.",
    "Coloquei um <Link /> no meu header, pra quando o usuário clicar no logo do site, ele ser redirecionado para a home path /"
  ],
  "Commit 6 (parte 3)":
  [
    "Corrigi o bug que o mapa não aparecia de fundo, bastou adicionar um style width+height de 100% que resolveu. e adicionei minha api key ao projeto, agora o google map react está funcionando.",
    "Feature: Quando o usuário clica(onClick) no marker do google maps, agora o marker fica verde se o usuário tiver clicado nele.(troco o src do img usando lógica e state)",
    "Adicionei redux no projeto - yarn add redux react-redux",
    "Adicionei a extensão do redux dev tools no google chrome",
    "Instalei o redux dev tools extension no projeto - yarn add redux-devtools-extension",
    "Adicionei o immer para garantir imutabilidade JS, é uma boa prática usar immer junto com redux.",
    "Implementação: Finalizei toda a implementação do redux no nosso projeto, e coloquei nossa primeira action(SET_CUSTOMER)",
    "Boas Práticas: Criei os arqivos actions e types para chamar nossas actions de forma dinâmica",
    "Boas Práticas: Renomeei o set_customer como @shop/set_customer para seguir a boa prática, que determina que o nome da action seja @nomeDoMódulo/nomeDaAction"
  ],
  "Commit 7":
  [
   "Quando eu desenvolvo uma aplicação com react + node + mongo, como eu inicio todos os ambientes para o projeto rodar de forma local? Primeiro precisa startar a banco de dados: sudo systemctl start mongod, depois precisa ver se o banco realmente está UP sudo systemctl status mongod, aí a api vai consumir do mongo, então inicia a api. Navega pelo terminal até a pasta api, no nosso caso é cd api, e depois yarn start. 3- E agora, vamos startar nosso front end, que vai consumir da api, ai fazemos cd web, yarn start. Pronto agora vc tá rodando tudo de forma local. (react+node+mongo)",
   "Redux: Gerenciar estado do componente Marker",
   "Consumindo estado do Redux no Front - Troquei os dados estáticos das petshops pelo dado dinâmico da store do redux",
   "Fiz a configuração completa do redux saga, neste use case vamos buscar dados do mongoDB.",
   "Implementei IMMER.JS para garantir imutabilidade no meu reducer."
  ],
  "Commit 8":
  [
    "(Redux - MARKER) Removemos o controle de estado do componente marker, que estava sendo realizado pelo hook useState, e passamos a gerenciar o estado dele através do redux. ",
    "(Redux) Realizamos toda a configuração da petshop selecionada, para controlar o estado de quando o usuário clicar em uma loja parceira",
    "(CSS) Estilizamos a petshop clicada, pra aparecer na lista uma borda verde embaixo, pro usuário saber qual delas está selecionada. Assim como configuramos um hover, com o mesmo efeito.",
    "(Redux Saga/Router Dom - PETSHOP QUERY) Para a api saber qual petshop queremos carregar, enviamos o ID da petshop clicada no mapa/lista por req.params. No caso do <Link> o nome é match.params.id, que é passado como props por padrão, nem precisamos criar. Atualizamos o componente para ele estar preparado para receber esta props do front, e o id é enviado para nosso redux saga realizar a consulta no mongoDB",
    "(Redux Saga - PETSHOP QUERY) Quando clicamos na petshop no mapa, abre a pagina da petshop parceira. Substituimos os produtos de mock da loja parceira pelos produtos reais do DB. No redux saga configuramos a request, e depois no reducer, atualizamos o estado do objeto PETSHOP. Dentro do objeto petshop tem petshop.products, que são os produtos que o parceiro possui à venda. Nesta etapa encontramos um bug. O front end estava carregando a dom, antes do redux saga retornar os dados da api, e estava dando objeto undefined na petshop.products. Coloquei o optional chaining, que permite o objeto ser undefined sem dar crash, e aí, ele passou a carregar a tela e os dados da api chegavam e preenchiam certinho a loja do parceiro com todos os produtos a venda",
    "(Redux/front - PETSHOP QUERY) Substituimos os dados de produto de mock por produtos reais que vieram no objeto petshop, que o redux saga chamou da api",
    "(Redux - PETSHOP QUERY) Criamos a action requestPetshop(id), que recebe o id da petshop que é pra buscar. Esse id vem do <Link>, passa por props para o componente, e o componente da dispatch na action passando este id como parâmetro da action lá no front.",
    "(Redux - PETSHOP QUERY) Criamos a action setPetshop(petshop), que recebe o objeto petshop. Essa action setPetshop é chamada dentro do nosso redux saga. Basicamente é assim, o redux saga dá a requestPetshop pra puxar os dados, e depois da um yield pra retornar os valores pra action setPetshop. A setPetshop vai atualizaar o estado inicial do objeto petshop, então a requestPetshop apenas dá um get nos dados da api.",
    "(Redux - PETSHOP QUERY Queremos que a requisição get dos produtos da petshop seja realizada assim que o componente for montado na tela, pra isso, colocarmos o dispatch dentro do useEffect com dependências vazias. 1-O front dispara o redux saga. 2-No finalzinho do saga, ele ativa o setPetshop(atualizando a listagem de produtos daquela petshop parceira). 3-No front, para usarmos este valor, a gente busca ele da nossa store, usando o useSelector. 4-Pronto, agora podemos acessar os valores atualizados do objeto petshop.",
    {
      "Cart":
      [
      "Precisamos verificar se o produto existe dentro do carrinho, para saber se vamos adicionar ou remover.",
      "Nosso carrinho é uma array. Arrays possuem posições/index.", 
      "Quero executar uma lógica e salvar o resultado dela na variável index, pra depois eu verificar o que eu farei com a ação do usuário (se vai adicionar ou remover do carrinho)",
      "No index ficará salvo o resultado de: Existe algum produto no meu carrinho que tem o mesmo ID que o produto que eu acabei de clicar? Salve o resultado desta lógica na variavel index.",
      "Se o index for diferente de -1, ou seja, se ele existir, faça o seguinte: percorra a array a partir do item encontrado, e exclua 1 item a partir dele, ou seja, somente ele mesmo.",
      "Caso contrário (o produto não exista), utilize o método push (que adiciona registros em array), e pegue o produto que foi clicado e adicione na array do carrinho.",
      "Substituimos os produtos de mock que estavam sendo usados no carrinho por produtos reais"
      ]
    }
  ]
}